import {
  pgTable,
  text,
  varchar,
  timestamp,
  jsonb,
  index,
  serial,
  integer,
  boolean,
  numeric,
} from "drizzle-orm/pg-core";
import { createInsertSchema } from "drizzle-zod";
import { z } from "zod";

// Session storage table.
// (IMPORTANT) This table is mandatory for Replit Auth, don't drop it.
export const sessions = pgTable(
  "sessions",
  {
    sid: varchar("sid").primaryKey(),
    sess: jsonb("sess").notNull(),
    expire: timestamp("expire").notNull(),
  },
  (table) => [index("IDX_session_expire").on(table.expire)],
);

// User storage table.
// (IMPORTANT) This table is mandatory for Replit Auth, don't drop it.
export const users = pgTable("users", {
  id: varchar("id").primaryKey().notNull(),
  email: varchar("email").unique(),
  firstName: varchar("first_name"),
  lastName: varchar("last_name"),
  profileImageUrl: varchar("profile_image_url"),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

// User profiles with exam-specific information
export const userProfiles = pgTable("user_profiles", {
  id: serial("id").primaryKey(),
  userId: varchar("user_id").notNull().references(() => users.id),
  targetExam: varchar("target_exam").notNull(), // NEET, UPSC, SSC, JEE
  strongSubjects: text("strong_subjects").array(),
  weakSubjects: text("weak_subjects").array(),
  dailyStudyTime: integer("daily_study_time"), // minutes
  studyStyle: varchar("study_style"), // visual, auditory, kinesthetic
  goalDate: timestamp("goal_date"),
  coins: integer("coins").default(0),
  streak: integer("streak").default(0),
  lastStudyDate: timestamp("last_study_date"),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

// Study plans generated by AI
export const studyPlans = pgTable("study_plans", {
  id: serial("id").primaryKey(),
  userId: varchar("user_id").notNull().references(() => users.id),
  date: timestamp("date").notNull(),
  tasks: jsonb("tasks").notNull(), // Array of study tasks
  completed: boolean("completed").default(false),
  completionPercentage: numeric("completion_percentage").default("0"),
  createdAt: timestamp("created_at").defaultNow(),
});

// Current affairs articles
export const currentAffairs = pgTable("current_affairs", {
  id: serial("id").primaryKey(),
  title: text("title").notNull(),
  content: text("content").notNull(),
  summary: text("summary").notNull(),
  category: varchar("category").notNull(), // Polity, Economy, Environment, etc.
  source: varchar("source"),
  publishedDate: timestamp("published_date").notNull(),
  tags: text("tags").array(),
  imageUrl: varchar("image_url"), // Thumbnail image for the article
  importance: varchar("importance").default("medium"), // high, medium, low
  examRelevance: text("exam_relevance").array(), // NEET, UPSC, SSC, JEE
  readTime: integer("read_time"), // estimated reading time in minutes
  aiKeyPoints: jsonb("ai_key_points"), // AI-generated key points
  aiSummary: text("ai_summary"), // Enhanced AI summary
  relatedTopics: text("related_topics").array(),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

// User bookmarks for current affairs
export const currentAffairsBookmarks = pgTable("current_affairs_bookmarks", {
  id: serial("id").primaryKey(),
  userId: varchar("user_id").notNull().references(() => users.id),
  currentAffairId: integer("current_affair_id").notNull().references(() => currentAffairs.id),
  bookmarkedAt: timestamp("bookmarked_at").defaultNow(),
});

// User interactions with current affairs (views, time spent, etc.)
export const currentAffairsInteractions = pgTable("current_affairs_interactions", {
  id: serial("id").primaryKey(),
  userId: varchar("user_id").notNull().references(() => users.id),
  currentAffairId: integer("current_affair_id").notNull().references(() => currentAffairs.id),
  interactionType: varchar("interaction_type").notNull(), // view, bookmark, share, quiz_generated
  metadata: jsonb("metadata"), // Additional data like time spent, scroll percentage
  createdAt: timestamp("created_at").defaultNow(),
});

// AI-generated personalized recommendations
export const currentAffairsRecommendations = pgTable("current_affairs_recommendations", {
  id: serial("id").primaryKey(),
  userId: varchar("user_id").notNull().references(() => users.id),
  currentAffairId: integer("current_affair_id").notNull().references(() => currentAffairs.id),
  recommendationType: varchar("recommendation_type").notNull(), // trending, exam_relevant, weakness_focused
  score: numeric("score").notNull(), // relevance score 0-1
  reason: text("reason"), // Why this was recommended
  generatedAt: timestamp("generated_at").defaultNow(),
  viewed: boolean("viewed").default(false),
});

// User notes on current affairs articles
export const currentAffairsNotes = pgTable("current_affairs_notes", {
  id: serial("id").primaryKey(),
  userId: varchar("user_id").notNull().references(() => users.id),
  currentAffairId: integer("current_affair_id").notNull().references(() => currentAffairs.id),
  noteText: text("note_text").notNull(),
  highlighted: boolean("highlighted").default(false), // Whether this is a highlighted section
  position: jsonb("position"), // Position in the article for contextual notes
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

// Vocabulary words
export const vocabulary = pgTable("vocabulary", {
  id: serial("id").primaryKey(),
  word: varchar("word").notNull().unique(),
  meaning: text("meaning").notNull(),
  usage: text("usage").notNull(),
  mnemonic: text("mnemonic"),
  difficulty: varchar("difficulty").notNull(), // Basic, Moderate, Advanced
  category: varchar("category"), // Economy, Essay, etc.
  pronunciation: varchar("pronunciation"),
  createdAt: timestamp("created_at").defaultNow(),
});

// User's saved vocabulary progress
export const userVocabulary = pgTable("user_vocabulary", {
  id: serial("id").primaryKey(),
  userId: varchar("user_id").notNull().references(() => users.id),
  vocabularyId: integer("vocabulary_id").notNull().references(() => vocabulary.id),
  status: varchar("status").notNull(), // learned, review, difficult
  lastReviewed: timestamp("last_reviewed"),
  createdAt: timestamp("created_at").defaultNow(),
});

// Quiz questions
export const quizQuestions = pgTable("quiz_questions", {
  id: serial("id").primaryKey(),
  question: text("question").notNull(),
  options: text("options").array().notNull(),
  correctAnswer: integer("correct_answer").notNull(),
  explanation: text("explanation"),
  subject: varchar("subject").notNull(),
  topic: varchar("topic"),
  difficulty: varchar("difficulty").notNull(),
  source: varchar("source"), // current_affairs, vocabulary, general
  sourceId: integer("source_id"), // Reference to source table
  createdAt: timestamp("created_at").defaultNow(),
});

// Quiz attempts
export const quizAttempts = pgTable("quiz_attempts", {
  id: serial("id").primaryKey(),
  userId: varchar("user_id").notNull().references(() => users.id),
  questionId: integer("question_id").notNull().references(() => quizQuestions.id),
  selectedAnswer: integer("selected_answer").notNull(),
  isCorrect: boolean("is_correct").notNull(),
  timeSpent: integer("time_spent"), // seconds
  attemptedAt: timestamp("attempted_at").defaultNow(),
});

// Notes vault
export const notes = pgTable("notes", {
  id: serial("id").primaryKey(),
  userId: varchar("user_id").notNull().references(() => users.id),
  title: varchar("title").notNull(),
  content: text("content").notNull(),
  tags: text("tags").array(),
  category: varchar("category").notNull(), // Current Affairs, Vocab Vault, AI Mentor Notes, Mistakes
  source: varchar("source"), // manual, ai_generated, uploaded
  sourceId: integer("source_id"),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

// Flashcards
export const flashcards = pgTable("flashcards", {
  id: serial("id").primaryKey(),
  userId: varchar("user_id").notNull().references(() => users.id),
  front: text("front").notNull(),
  back: text("back").notNull(),
  status: varchar("status").notNull(), // learned, review, difficult
  subject: varchar("subject"),
  lastReviewed: timestamp("last_reviewed"),
  reviewCount: integer("review_count").default(0),
  createdAt: timestamp("created_at").defaultNow(),
});

// User progress tracking
export const userProgress = pgTable("user_progress", {
  id: serial("id").primaryKey(),
  userId: varchar("user_id").notNull().references(() => users.id),
  subject: varchar("subject").notNull(),
  topic: varchar("topic"),
  completedTasks: integer("completed_tasks").default(0),
  totalTasks: integer("total_tasks").default(0),
  accuracy: numeric("accuracy").default("0"),
  timeSpent: integer("time_spent").default(0), // minutes
  lastStudied: timestamp("last_studied"),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

// Badges and achievements
export const badges = pgTable("badges", {
  id: serial("id").primaryKey(),
  name: varchar("name").notNull(),
  description: text("description").notNull(),
  icon: varchar("icon").notNull(),
  criteria: jsonb("criteria").notNull(),
  coinsReward: integer("coins_reward").default(0),
  createdAt: timestamp("created_at").defaultNow(),
});

// User badges
export const userBadges = pgTable("user_badges", {
  id: serial("id").primaryKey(),
  userId: varchar("user_id").notNull().references(() => users.id),
  badgeId: integer("badge_id").notNull().references(() => badges.id),
  earnedAt: timestamp("earned_at").defaultNow(),
});

// Uploaded resources
export const uploadedResources = pgTable("uploaded_resources", {
  id: serial("id").primaryKey(),
  userId: varchar("user_id").notNull().references(() => users.id),
  fileName: varchar("file_name").notNull(),
  fileType: varchar("file_type").notNull(),
  fileUrl: varchar("file_url"),
  processingStatus: varchar("processing_status").notNull(), // pending, processing, completed, failed
  extractedContent: text("extracted_content"),
  generatedSummary: text("generated_summary"),
  generatedFlashcards: jsonb("generated_flashcards"),
  generatedQuestions: jsonb("generated_questions"),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

// AI chat history
export const aiChatHistory = pgTable("ai_chat_history", {
  id: serial("id").primaryKey(),
  userId: varchar("user_id").notNull().references(() => users.id),
  message: text("message").notNull(),
  response: text("response").notNull(),
  context: jsonb("context"), // Additional context for the conversation
  createdAt: timestamp("created_at").defaultNow(),
});

// Schema exports
export type UpsertUser = typeof users.$inferInsert;
export type User = typeof users.$inferSelect;

export type InsertUserProfile = typeof userProfiles.$inferInsert;
export type UserProfile = typeof userProfiles.$inferSelect;

export type InsertStudyPlan = typeof studyPlans.$inferInsert;
export type StudyPlan = typeof studyPlans.$inferSelect;

export type InsertCurrentAffair = typeof currentAffairs.$inferInsert;
export type CurrentAffair = typeof currentAffairs.$inferSelect;

export type InsertCurrentAffairsBookmark = typeof currentAffairsBookmarks.$inferInsert;
export type CurrentAffairsBookmark = typeof currentAffairsBookmarks.$inferSelect;

export type InsertCurrentAffairsInteraction = typeof currentAffairsInteractions.$inferInsert;
export type CurrentAffairsInteraction = typeof currentAffairsInteractions.$inferSelect;

export type InsertCurrentAffairsRecommendation = typeof currentAffairsRecommendations.$inferInsert;
export type CurrentAffairsRecommendation = typeof currentAffairsRecommendations.$inferSelect;

export type InsertCurrentAffairsNote = typeof currentAffairsNotes.$inferInsert;
export type CurrentAffairsNote = typeof currentAffairsNotes.$inferSelect;

export type InsertVocabulary = typeof vocabulary.$inferInsert;
export type Vocabulary = typeof vocabulary.$inferSelect;

export type InsertUserVocabulary = typeof userVocabulary.$inferInsert;
export type UserVocabulary = typeof userVocabulary.$inferSelect;

export type InsertQuizQuestion = typeof quizQuestions.$inferInsert;
export type QuizQuestion = typeof quizQuestions.$inferSelect;

export type InsertQuizAttempt = typeof quizAttempts.$inferInsert;
export type QuizAttempt = typeof quizAttempts.$inferSelect;

export type InsertNote = typeof notes.$inferInsert;
export type Note = typeof notes.$inferSelect;

export type InsertFlashcard = typeof flashcards.$inferInsert;
export type Flashcard = typeof flashcards.$inferSelect;

export type InsertUserProgress = typeof userProgress.$inferInsert;
export type UserProgress = typeof userProgress.$inferSelect;

export type InsertBadge = typeof badges.$inferInsert;
export type Badge = typeof badges.$inferSelect;

export type InsertUserBadge = typeof userBadges.$inferInsert;
export type UserBadge = typeof userBadges.$inferSelect;

export type InsertUploadedResource = typeof uploadedResources.$inferInsert;
export type UploadedResource = typeof uploadedResources.$inferSelect;

export type InsertAiChatHistory = typeof aiChatHistory.$inferInsert;
export type AiChatHistory = typeof aiChatHistory.$inferSelect;

// Insert schemas
export const insertUserProfileSchema = createInsertSchema(userProfiles).omit({
  id: true,
  createdAt: true,
  updatedAt: true,
}).extend({
  goalDate: z.union([
    z.string().transform((str) => new Date(str)),
    z.date(),
    z.null()
  ]).optional(),
});

export const insertStudyPlanSchema = createInsertSchema(studyPlans).omit({
  id: true,
  createdAt: true,
});

export const insertCurrentAffairSchema = createInsertSchema(currentAffairs).omit({
  id: true,
  createdAt: true,
  updatedAt: true,
});

export const insertCurrentAffairsBookmarkSchema = createInsertSchema(currentAffairsBookmarks).omit({
  id: true,
  bookmarkedAt: true,
});

export const insertCurrentAffairsInteractionSchema = createInsertSchema(currentAffairsInteractions).omit({
  id: true,
  createdAt: true,
});

export const insertCurrentAffairsRecommendationSchema = createInsertSchema(currentAffairsRecommendations).omit({
  id: true,
  generatedAt: true,
});

export const insertCurrentAffairsNoteSchema = createInsertSchema(currentAffairsNotes).omit({
  id: true,
  createdAt: true,
  updatedAt: true,
});

export const insertVocabularySchema = createInsertSchema(vocabulary).omit({
  id: true,
  createdAt: true,
});

export const insertQuizQuestionSchema = createInsertSchema(quizQuestions).omit({
  id: true,
  createdAt: true,
});

export const insertNoteSchema = createInsertSchema(notes).omit({
  id: true,
  createdAt: true,
  updatedAt: true,
});

export const insertFlashcardSchema = createInsertSchema(flashcards).omit({
  id: true,
  createdAt: true,
});

// Additional validation schemas for API endpoints
export const currentAffairsNoteInputSchema = z.object({
  noteText: z.string().min(1, "Note text is required"),
  highlighted: z.boolean().optional().default(false),
  position: z.any().optional().nullable(),
});

export const quizGenerationSchema = z.object({
  timeframe: z.enum(['today', 'week', 'month']).default('week'),
  numQuestions: z.number().int().min(1).max(50).default(10),
  categories: z.array(z.string()).optional(),
  examType: z.string().optional().default('general'),
});
